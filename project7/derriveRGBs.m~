function [ result ] = derriveRGBs( XYZs, blackXYZ, M_disp )

%% Test reverse display model

cie = loadCIEData();
D50_XYZ = ref2XYZ(cie.illE, cie.cmf2deg, cie.illD50); 	
D65_XYZ = ref2XYZ(cie.illE, cie.cmf2deg, cie.illD50);

adapt_XYZs = catBradford(XYZs',D50_XYZ, D65_XYZ);

% Subtract XYZ black from each adapted value
adapt_XYZs = adapt_XYZs' - repmat(blackXYZ,24,1);

%Multiply by matrix to obtain radiometric scalars
scalars = adapt_XYZs * M_disp;

% Normalize scalars by 100
scalars = scalars/100;

% Clip any out of range values
scalars(scalars<0) = 0;
scalars(scalars>1) = 1;

%Multiply scalars by 1023 and round to nearest integer
scalars = round(scalars * 1023) + 1;

%Index into appropriate lookup tables
R_LUT_RESULT = RLUT_rev(scalars);
G_LUT_RESULT = GLUT_rev(scalars);
B_LUT_RESULT = BLUT_rev(scalars);

result_RGBs = [R_LUT_RESULT(:,1) G_LUT_RESULT(:,2) B_LUT_RESULT(:,3)];

% Convert to 8 bit unsigned integers
R_LUT_RESULT = uint8(RLUT_rev(scalars(:,1)))';
G_LUT_RESULT = uint8(GLUT_rev(scalars(:,2)))';
B_LUT_RESULT = uint8(BLUT_rev(scalars(:,3)))';

result = [R_LUT_RESULT G_LUT_RESULT B_LUT_RESULT];

end

